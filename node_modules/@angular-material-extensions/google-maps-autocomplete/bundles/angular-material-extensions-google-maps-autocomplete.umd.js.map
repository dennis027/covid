{"version":3,"file":"angular-material-extensions-google-maps-autocomplete.umd.js","sources":["../../../../projects/angular-material-extensions/google-maps-autocomplete/src/lib/directives/address-validator/mat-address-validator.directive.ts","../../../../projects/angular-material-extensions/google-maps-autocomplete/src/lib/component/mat-google-maps-autocomplete.component.ts","../../../../projects/angular-material-extensions/google-maps-autocomplete/src/lib/helpers/parser.ts","../../../../projects/angular-material-extensions/google-maps-autocomplete/src/lib/animations/index.ts","../../../../projects/angular-material-extensions/google-maps-autocomplete/src/lib/component/mat-search-google-maps-autocomplete/mat-search-google-maps-autocomplete.component.ts","../../../../projects/angular-material-extensions/google-maps-autocomplete/src/lib/directives/mat-google-maps-autocomplete.directive.ts","../../../../projects/angular-material-extensions/google-maps-autocomplete/src/lib/mat-google-maps-autocomplete.module.ts","../../../../projects/angular-material-extensions/google-maps-autocomplete/src/public-api.ts","../../../../projects/angular-material-extensions/google-maps-autocomplete/src/angular-material-extensions-google-maps-autocomplete.ts"],"sourcesContent":["import {Directive, EventEmitter, forwardRef} from '@angular/core';\nimport {AbstractControl, NG_VALIDATORS, ValidationErrors, Validator, ValidatorFn} from '@angular/forms';\nimport PlaceResult = google.maps.places.PlaceResult;\n\n// https://github.com/angular/angular/blob/master/packages/forms/src/directives/validators.ts\n\n@Directive({\n  selector: '[mat-address-validate][formControlName],[MatValidateAddress][formControl],[MatValidateAddress][ngModel]',\n  providers: [\n    {provide: NG_VALIDATORS, useExisting: forwardRef(() => MatValidateAddressDirective), multi: true}\n  ]\n})\nexport class MatValidateAddressDirective implements Validator {\n\n  public subscription: any;\n\n  private _address: PlaceResult;\n\n\n  constructor() {\n  }\n\n  public validate(): ValidatorFn {\n    return (control: AbstractControl): ValidationErrors | any => {\n      return this.address ? null : {\n        validateAddress: {\n          valid: false\n        }\n      };\n    }\n  }\n\n  public subscribe(eventEmitter: EventEmitter<any>) {\n    this.subscription = eventEmitter.subscribe((address: PlaceResult) => {\n      this.address = address;\n    });\n  }\n\n  public unsubscribe() {\n    this.subscription.unsubscribe();\n  }\n\n  get address() {\n    return this._address;\n  }\n\n  set address(value) {\n    this._address = value;\n  }\n}\n","import {Component, ElementRef, EventEmitter, forwardRef, Input, NgZone, OnInit, Output, ViewChild} from '@angular/core';\nimport {ControlValueAccessor, FormControl, NG_VALUE_ACCESSOR, Validators} from '@angular/forms';\nimport {MapsAPILoader} from '@agm/core';\nimport {MatValidateAddressDirective} from '../directives/address-validator/mat-address-validator.directive';\nimport {Location} from '../interfaces/location.interface';\nimport {GermanAddress} from '../interfaces';\nimport PlaceResult = google.maps.places.PlaceResult;\nimport AutocompleteOptions = google.maps.places.AutocompleteOptions;\n\nexport enum Appearance {\n  STANDARD = 'standard',\n  FILL = 'fill',\n  OUTLINE = 'outline',\n  LEGACY = 'legacy',\n}\n\n@Component({\n  selector: 'mat-google-maps-autocomplete',\n  exportAs: 'matGoogleMapsAutocomplete',\n  templateUrl: './mat-google-maps-autocomplete.component.html',\n  styleUrls: ['./mat-google-maps-autocomplete.component.scss'],\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => MatGoogleMapsAutocompleteComponent),\n      multi: true\n    }\n  ]\n})\nexport class MatGoogleMapsAutocompleteComponent implements OnInit, ControlValueAccessor {\n\n  @ViewChild('search')\n  public searchElementRef: ElementRef;\n\n  @Input()\n  addressLabelText = 'Address';\n\n  @Input()\n  placeholderText = 'Please enter the address';\n\n  @Input()\n  requiredErrorText = 'The address is required';\n\n  @Input()\n  invalidErrorText = 'The address is not valid';\n\n  @Input()\n  appearance: string | Appearance = Appearance.STANDARD;\n\n  @Input()\n  value: PlaceResult;\n\n  @Input()\n  address: PlaceResult | string;\n\n  @Input()\n  country: string | string[];\n\n  @Input()\n  placeIdOnly?: boolean;\n\n  @Input()\n  strictBounds?: boolean;\n\n  @Input()\n  types?: string[];\n  // types: string[] = ['address'];\n\n  @Input()\n  type?: string;\n\n  @Input()\n  autoCompleteOptions: AutocompleteOptions = {};\n\n  @Output()\n  onChange: EventEmitter<PlaceResult | string | null> = new EventEmitter<PlaceResult | string | null>();\n\n  @Output()\n  onAutocompleteSelected: EventEmitter<PlaceResult> = new EventEmitter<PlaceResult>();\n\n  @Output()\n  onGermanAddressMapped: EventEmitter<GermanAddress> = new EventEmitter<GermanAddress>();\n\n  @Output()\n  onLocationSelected: EventEmitter<Location> = new EventEmitter<Location>();\n\n\n  private onNewPlaceResult: EventEmitter<any> = new EventEmitter();\n  private addressValidator: MatValidateAddressDirective = new MatValidateAddressDirective();\n\n  public addressSearchControl: FormControl = new FormControl({value: null}, Validators.compose([\n    Validators.required,\n    this.addressValidator.validate()])\n  );\n\n  propagateChange = (_: any) => {\n  };\n\n  constructor(private mapsAPILoader: MapsAPILoader,\n              private ngZone: NgZone) {\n  }\n\n  ngOnInit(): void {\n    this.addressValidator.subscribe(this.onNewPlaceResult);\n\n    const options: AutocompleteOptions = {\n      // types: ['address'],\n      // componentRestrictions: {country: this.country},\n      placeIdOnly: this.placeIdOnly,\n      strictBounds: this.strictBounds,\n      // types: this.types,\n      type: this.type\n    };\n\n    // tslint:disable-next-line:no-unused-expression\n    this.country ? options.componentRestrictions = {country: this.country} : null;\n    // tslint:disable-next-line:no-unused-expression\n    this.country ? options.types = this.types : null;\n\n    this.autoCompleteOptions = Object.assign(this.autoCompleteOptions, options);\n    this.initGoogleMapsAutocomplete();\n  }\n\n  public initGoogleMapsAutocomplete() {\n    this.mapsAPILoader\n      .load()\n      .then(() => {\n        const autocomplete = new google.maps.places.Autocomplete(this.searchElementRef.nativeElement, this.autoCompleteOptions);\n        autocomplete.addListener('place_changed', () => {\n          this.ngZone.run(() => {\n            // get the place result\n            const place: PlaceResult = autocomplete.getPlace();\n\n            const germanAddress: GermanAddress = {\n              gmID: place.id,\n              icon: place.icon,\n              url: place.url,\n              placeID: place.place_id,\n              displayAddress: place.formatted_address,\n              name: place.name,\n              vicinity: place.vicinity,\n              locality: {},\n              state: {},\n              country: {},\n              geoLocation: {latitude: -1, longitude: -1},\n            };\n\n            if (place.geometry && place.geometry.location) {\n              germanAddress.geoLocation.latitude = place.geometry.location.lat();\n              germanAddress.geoLocation.longitude = place.geometry.location.lng();\n            }\n\n            place.address_components.forEach(value => {\n              if (value.types.indexOf('street_number') > -1) {\n                germanAddress.streetNumber = value.short_name;\n              }\n              if (value.types.indexOf('route') > -1) {\n                germanAddress.streetName = value.long_name;\n              }\n              if (value.types.indexOf('postal_code') > -1) {\n                germanAddress.postalCode = Number(value.short_name);\n              }\n              if (value.types.indexOf('sublocality') > -1) {\n                germanAddress.sublocality = value.long_name;\n              }\n              if (value.types.indexOf('locality') > -1) {\n                germanAddress.locality.long = value.long_name;\n                germanAddress.locality.short = value.short_name;\n              }\n              if (value.types.indexOf('administrative_area_level_1') > -1) {\n                germanAddress.state.long = value.long_name;\n                germanAddress.state.short = value.short_name;\n              }\n              if (value.types.indexOf('country') > -1) {\n                germanAddress.country.long = value.long_name;\n                germanAddress.country.short = value.short_name;\n              }\n              if (value.types.indexOf('administrative_area_level_3') > -1) {\n                germanAddress.locality.short = value.short_name;\n              }\n            });\n\n            this.onGermanAddressMapped.emit(germanAddress);\n\n            if (!place.place_id || place.geometry === undefined || place.geometry === null) {\n              // place result is not valid\n              return;\n            } else {\n              // show dialog to select a address from the input\n              // emit failed event\n              this.value = place;\n              this.propagateChange(this.value)\n            }\n            this.address = place.formatted_address;\n            this.onAutocompleteSelected.emit(place);\n            // console.log('onAutocompleteSelected -> ', place);\n            this.onLocationSelected.emit(\n              {\n                latitude: place.geometry.location.lat(),\n                longitude: place.geometry.location.lng()\n              });\n          });\n        });\n      })\n      .catch((err) => console.log(err));\n  }\n\n  public onQuery(event: any) {\n    // console.log('onChange()', event);\n    this.onChange.emit(this.address);\n  }\n\n  private resetAddress() {\n    this.address = null;\n    this.addressSearchControl.updateValueAndValidity();\n  }\n\n  writeValue(obj: any): void {\n    if (obj) {\n      this.value = obj;\n    }\n  }\n\n  registerOnChange(fn: any): void {\n    this.propagateChange = fn;\n  }\n\n  registerOnTouched(fn: any): void {\n    throw new Error('Method not implemented.');\n  }\n\n  setDisabledState?(isDisabled: boolean): void {\n    throw new Error('Method not implemented.');\n  }\n\n}\n","import PlaceResult = google.maps.places.PlaceResult;\nimport {GermanAddress} from '../interfaces';\n\nexport function parseGermanAddress(placeResult: PlaceResult): GermanAddress {\n  const germanAddress: GermanAddress = {\n    gmID: placeResult.id,\n    icon: placeResult.icon,\n    url: placeResult.url,\n    placeID: placeResult.place_id,\n    displayAddress: placeResult.formatted_address,\n    name: placeResult.name,\n    vicinity: placeResult.vicinity,\n    locality: {},\n    state: {},\n    country: {},\n    geoLocation: {latitude: -1, longitude: -1},\n  };\n\n  if (placeResult.geometry && placeResult.geometry.location) {\n    germanAddress.geoLocation.latitude = placeResult.geometry.location.lat();\n    germanAddress.geoLocation.longitude = placeResult.geometry.location.lng();\n  }\n\n  if (placeResult.address_components && placeResult.address_components.length > 0) {\n    placeResult.address_components.forEach(value => {\n      if (value.types.indexOf('street_number') > -1) {\n        germanAddress.streetNumber = value.short_name;\n      }\n      if (value.types.indexOf('route') > -1) {\n        germanAddress.streetName = value.long_name;\n      }\n      if (value.types.indexOf('postal_code') > -1) {\n        germanAddress.postalCode = Number(value.short_name);\n      }\n      if (value.types.indexOf('sublocality') > -1) {\n        germanAddress.sublocality = value.long_name;\n      }\n      if (value.types.indexOf('locality') > -1) {\n        germanAddress.locality.long = value.long_name;\n        germanAddress.locality.short = value.short_name;\n      }\n      if (value.types.indexOf('administrative_area_level_1') > -1) {\n        germanAddress.state.long = value.long_name;\n        germanAddress.state.short = value.short_name;\n      }\n      if (value.types.indexOf('country') > -1) {\n        germanAddress.country.long = value.long_name;\n        germanAddress.country.short = value.short_name;\n      }\n      if (value.types.indexOf('administrative_area_level_3') > -1) {\n        germanAddress.locality.short = value.short_name;\n      }\n    });\n  }\n  return germanAddress;\n}\n","import {animate, animateChild, animation, query, stagger, state, style, transition, trigger, useAnimation} from '@angular/animations';\n\nconst customAnimation = animation(\n  [\n    style({\n      opacity: '{{opacity}}',\n      transform: 'scale({{scale}}) translate3d({{x}}, {{y}}, {{z}})'\n    }),\n    animate('{{duration}} {{delay}} cubic-bezier(0.0, 0.0, 0.2, 1)', style('*'))\n  ],\n  {\n    params: {\n      duration: '200ms',\n      delay: '0ms',\n      opacity: '0',\n      scale: '1',\n      x: '0',\n      y: '0',\n      z: '0'\n    }\n  }\n);\n\nexport const InputAnimations = [\n  trigger('animate', [transition('void => *', [useAnimation(customAnimation)])]),\n\n  trigger('animateStagger', [\n    state('50', style('*')),\n    state('100', style('*')),\n    state('200', style('*')),\n\n    transition('void => 50', query('@*', [stagger('50ms', [animateChild()])], {optional: true})),\n    transition('void => 100', query('@*', [stagger('100ms', [animateChild()])], {optional: true})),\n    transition('void => 200', query('@*', [stagger('200ms', [animateChild()])], {optional: true}))\n  ]),\n];\n","import {Component, EventEmitter, forwardRef, Input, OnInit, Output} from '@angular/core';\nimport {ControlValueAccessor, FormBuilder, FormGroup, NG_VALUE_ACCESSOR, Validators} from '@angular/forms';\n\nimport {parseGermanAddress} from '../../helpers/parser';\nimport {GermanAddress} from '../../interfaces';\nimport {Appearance} from '../mat-google-maps-autocomplete.component';\nimport {InputAnimations} from '../../animations';\nimport {debounceTime, distinctUntilChanged, takeUntil} from 'rxjs/operators';\nimport {Subject} from 'rxjs';\n\n@Component({\n  selector: 'mat-search-google-maps-autocomplete',\n  templateUrl: './mat-search-google-maps-autocomplete.component.html',\n  styleUrls: ['./mat-search-google-maps-autocomplete.component.scss'],\n  animations: InputAnimations,\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => MatSearchGoogleMapsAutocompleteComponent),\n      multi: true\n    }\n  ]\n})\nexport class MatSearchGoogleMapsAutocompleteComponent implements OnInit, ControlValueAccessor {\n\n  constructor(private formBuilder: FormBuilder) {\n    // Set the private defaults\n    this._unsubscribeAll = new Subject();\n  }\n\n  @Input()\n  searchBarAppearance: string | Appearance;\n\n  @Input()\n  appearance: string | Appearance = Appearance.STANDARD;\n\n  @Input()\n  searchAddressLabel = 'Search Address';\n\n  @Input()\n  streetNameLabel = 'Street';\n\n  @Input()\n  streetNumberLabel = 'Nr.';\n\n  @Input()\n  postalCodeLabel = 'PLZ';\n\n  @Input()\n  localityLabel = 'Locality';\n\n  @Input()\n  vicinityLabel = 'Vicinity';\n\n  @Input()\n  showVicinity: boolean;\n\n  @Input()\n  country: string | string[];\n\n  @Input()\n  placeIdOnly?: boolean;\n\n  @Input()\n  strictBounds?: boolean;\n\n  @Input()\n  types?: string[];\n  // types: string[] = ['address'];\n\n  @Input()\n  type?: string;\n\n  @Input()\n  readonly: boolean;\n\n  @Input()\n  disableSearch: boolean;\n\n  @Input() private _value: GermanAddress;\n\n  @Output()\n  onGermanAddressMapped: EventEmitter<GermanAddress> = new EventEmitter<GermanAddress>();\n\n  germanAddress: GermanAddress;\n  addressFormGroup: FormGroup;\n\n  firstInit = true;\n\n  // Private\n  private _unsubscribeAll: Subject<any>;\n\n  propagateChange = (_: any) => {\n  };\n\n\n  get value(): GermanAddress {\n    return this._value;\n  }\n\n  @Input()\n  set value(value: GermanAddress) {\n    this._value = value;\n    this.propagateChange(this.value);\n    console.log('setValue', this._value);\n  }\n\n  ngOnInit() {\n    this.createAddressFormGroup();\n    this.enableCustomInput();\n  }\n\n  createAddressFormGroup(): void {\n    this.addressFormGroup = this.formBuilder.group({\n      streetName: [this.value && this.value.streetName ? this.value.streetName : null, Validators.required],\n      streetNumber: [this.value && this.value.streetNumber ? this.value.streetNumber : null, Validators.required],\n      postalCode: [this.value && this.value.postalCode ? this.value.postalCode : null, Validators.required],\n      vicinity: [this.value && this.value.vicinity ? this.value.vicinity : null],\n      locality: this.formBuilder.group({\n        long: [this.value && this.value.locality && this.value.locality.long ? this.value.locality.long : null, Validators.required],\n      }),\n    });\n  }\n\n  enableCustomInput() {\n    this.addressFormGroup\n      .get('streetName')\n      .valueChanges\n      .pipe(distinctUntilChanged(), debounceTime(400), takeUntil(this._unsubscribeAll))\n      .subscribe(streetName => {\n        console.log('custom input for street Name', streetName);\n        console.log('custom input - new german address streetName', this.value);\n        !this.value ? this.value = {streetName} : this.value.streetName = streetName;\n        this.value.displayAddress = this.parseDisplayAddress();\n        this.propagateChange(this.value);\n      });\n    this.addressFormGroup\n      .get('streetNumber')\n      .valueChanges\n      .pipe(distinctUntilChanged(), debounceTime(400), takeUntil(this._unsubscribeAll))\n      .subscribe(streetNumber => {\n        !this.value ? this.value = {streetNumber} : this.value.streetNumber = streetNumber;\n        console.log('custom input - new german address streetNumber', this.value);\n        this.value.displayAddress = this.parseDisplayAddress();\n        this.propagateChange(this.value);\n      });\n    this.addressFormGroup\n      .get('postalCode')\n      .valueChanges\n      .pipe(distinctUntilChanged(), debounceTime(400), takeUntil(this._unsubscribeAll))\n      .subscribe(postalCode => {\n        !this.value ? this.value = {postalCode} : this.value.postalCode = postalCode;\n        console.log('custom input - new german address postalCode', this.value);\n        this.value.displayAddress = this.parseDisplayAddress();\n        this.propagateChange(this.value);\n      });\n    this.addressFormGroup\n      .get('vicinity')\n      .valueChanges\n      .pipe(distinctUntilChanged(), debounceTime(400), takeUntil(this._unsubscribeAll))\n      .subscribe(vicinity => {\n        !this.value ? this.value = {vicinity} : this.value.vicinity = vicinity;\n        console.log('custom input - new german address vicinity', this.value);\n        this.value.displayAddress = this.parseDisplayAddress();\n        this.propagateChange(this.value);\n      });\n    this.addressFormGroup\n      .get('locality')\n      .valueChanges\n      .pipe(distinctUntilChanged(), debounceTime(400), takeUntil(this._unsubscribeAll))\n      .subscribe(locality => {\n        !this.value ? this.value = {locality} : this.value.locality = locality;\n        console.log('custom input - new german address locality', this.value);\n        this.value.displayAddress = this.parseDisplayAddress();\n        this.propagateChange(this.value);\n      });\n  }\n\n  parseDisplayAddress() {\n    return `${this.value?.streetName ? this.value?.streetName : ''} ${this.value?.streetNumber ? this.value?.streetNumber : ''}${this.value?.postalCode || this.value?.locality?.long ? ', ' : ''}${this.value?.postalCode ? this.value?.postalCode : ''} ${this.value?.locality?.long ? this.value?.locality?.long : ''}`\n  }\n\n  syncAutoComplete($event: google.maps.places.PlaceResult) {\n    if (this.germanAddress) {\n      this.addressFormGroup.reset();\n    }\n    const germanAddress: GermanAddress = parseGermanAddress($event);\n    this.germanAddress = germanAddress;\n    if (germanAddress.vicinity) {\n      this.addressFormGroup.get('vicinity').patchValue(germanAddress.vicinity, {emitEvent: false, onlySelf: true});\n    }\n    if (germanAddress.streetName) {\n      this.addressFormGroup.get('streetName').patchValue(germanAddress.streetName, {emitEvent: false, onlySelf: true});\n    }\n    if (germanAddress.streetNumber) {\n      this.addressFormGroup.get('streetNumber').patchValue(germanAddress.streetNumber.toString(), {emitEvent: false, onlySelf: true});\n    }\n    if (germanAddress.postalCode) {\n      this.addressFormGroup.get('postalCode').patchValue(germanAddress.postalCode, {emitEvent: false, onlySelf: true});\n    }\n    if (germanAddress.locality && germanAddress.locality.long) {\n      this.addressFormGroup.get('locality.long').patchValue(germanAddress.locality.long, {emitEvent: false, onlySelf: true});\n    }\n\n    this.value = germanAddress;\n    this.onGermanAddressMapped.emit(germanAddress);\n  }\n\n  writeValue(obj: any): void {\n    let shouldRecreateFG = false;\n    if (obj) {\n      if (!this.value && this.firstInit) {\n        shouldRecreateFG = true;\n      }\n      this.value = obj;\n      if (shouldRecreateFG) {\n        this.createAddressFormGroup();\n        this.firstInit = false;\n      }\n    }\n  }\n\n  registerOnChange(fn: any): void {\n    this.propagateChange = fn;\n  }\n\n  registerOnTouched(fn: any): void {\n  }\n\n  setDisabledState(isDisabled: boolean): void {\n  }\n\n}\n","import {\n  ChangeDetectorRef,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  HostListener,\n  Inject,\n  Input,\n  NgZone,\n  OnInit,\n  Output,\n  PLATFORM_ID\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {MapsAPILoader} from '@agm/core';\nimport {Location} from '../interfaces/location.interface';\nimport {isPlatformBrowser} from '@angular/common';\nimport {GermanAddress} from '../interfaces/germand.address.interface';\nimport PlaceResult = google.maps.places.PlaceResult;\nimport AutocompleteOptions = google.maps.places.AutocompleteOptions;\n\n@Directive({\n  selector: '[matGoogleMapsAutocomplete]',\n  exportAs: 'matGoogleMapsAutocomplete',\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => MatGoogleMapsAutocompleteDirective),\n      multi: true\n    }\n  ]\n})\nexport class MatGoogleMapsAutocompleteDirective implements OnInit, ControlValueAccessor {\n\n  @Input()\n  address: PlaceResult | string;\n\n  @Input()\n  country: string | string[];\n\n  @Input()\n  placeIdOnly?: boolean;\n\n  @Input()\n  strictBounds?: boolean;\n\n  @Input()\n  types?: string[];\n\n  @Input()\n  type?: string;\n\n  @Input()\n  autoCompleteOptions: AutocompleteOptions = {};\n\n  @Output()\n  onChange: EventEmitter<PlaceResult | string | null> = new EventEmitter<PlaceResult | string | null>();\n\n  @Output()\n  onAutocompleteSelected: EventEmitter<PlaceResult> = new EventEmitter<PlaceResult>();\n\n  @Output()\n  onGermanAddressMapped: EventEmitter<GermanAddress> = new EventEmitter<GermanAddress>();\n\n  @Output()\n  onLocationSelected: EventEmitter<Location> = new EventEmitter<Location>();\n\n  disabled: boolean\n\n  _value: string;\n\n  get value(): string {\n    return this._value;\n  }\n\n  @Input()\n  set value(value: string) {\n    this._value = value;\n    this.propagateChange(this.value);\n    this.cf.markForCheck();\n  }\n\n  private onNewPlaceResult: EventEmitter<any> = new EventEmitter();\n\n  propagateChange = (_: any) => {\n  };\n\n  constructor(@Inject(PLATFORM_ID) public platformId: string,\n              // @Optional() @Self() public ngControl: NgControl,\n              public elemRef: ElementRef,\n              public mapsAPILoader: MapsAPILoader,\n              private cf: ChangeDetectorRef,\n              private ngZone: NgZone) {\n    // Replace the provider from above with this.\n    // if (this.ngControl != null) {\n    // Setting the value accessor directly (instead of using\n    // the providers) to avoid running into a circular import.\n    // this.ngControl.valueAccessor = this;\n    // }\n  }\n\n  ngOnInit(): void {\n    console.log('ngOnInit');\n    if (isPlatformBrowser(this.platformId)) {\n      const options: AutocompleteOptions = {\n        // types: ['address'],\n        // componentRestrictions: {country: this.country},\n        placeIdOnly: this.placeIdOnly,\n        strictBounds: this.strictBounds,\n        // types: this.types,\n        type: this.type\n      };\n\n      // tslint:disable-next-line:no-unused-expression\n      this.country ? options.componentRestrictions = {country: this.country} : null;\n      // tslint:disable-next-line:no-unused-expression\n      this.country ? options.types = this.types : null;\n\n      this.autoCompleteOptions = Object.assign(this.autoCompleteOptions, options);\n      this.initGoogleMapsAutocomplete();\n\n      // console.log('this.ngControl.value', this.ngControl?.control?.value)\n      // console.log('this.ngControl.value', this.ngControl.control.setValue('test'))\n      // this.cf.markForCheck();\n    }\n  }\n\n  @HostListener('change')\n  onChangeInputValue(): void {\n    console.log('in change InputTextFilterDirective');\n    const value = (this.elemRef.nativeElement as HTMLInputElement)?.value;\n    console.log('value --> ', value)\n    this.value = value;\n  }\n\n  public initGoogleMapsAutocomplete() {\n    this.mapsAPILoader\n      .load()\n      .then(() => {\n        const autocomplete = new google.maps.places.Autocomplete(this.elemRef.nativeElement, this.autoCompleteOptions);\n        autocomplete.addListener('place_changed', () => {\n          this.ngZone.run(() => {\n            // get the place result\n            const place: PlaceResult = autocomplete.getPlace();\n\n            const germanAddress: GermanAddress = {\n              gmID: place.id,\n              icon: place.icon,\n              url: place.url,\n              placeID: place.place_id,\n              displayAddress: place.formatted_address,\n              name: place.name,\n              vicinity: place.vicinity,\n              locality: {},\n              state: {},\n              country: {},\n              geoLocation: {latitude: -1, longitude: -1},\n            };\n\n            if (place.geometry && place.geometry.location) {\n              germanAddress.geoLocation.latitude = place.geometry.location.lat();\n              germanAddress.geoLocation.longitude = place.geometry.location.lng();\n            }\n\n            place.address_components.forEach(value => {\n              if (value.types.indexOf('street_number') > -1) {\n                germanAddress.streetNumber = value.short_name;\n              }\n              if (value.types.indexOf('route') > -1) {\n                germanAddress.streetName = value.long_name;\n              }\n              if (value.types.indexOf('postal_code') > -1) {\n                germanAddress.postalCode = Number(value.short_name);\n              }\n              if (value.types.indexOf('sublocality') > -1) {\n                germanAddress.sublocality = value.long_name;\n              }\n              if (value.types.indexOf('locality') > -1) {\n                germanAddress.locality.long = value.long_name;\n                germanAddress.locality.short = value.short_name;\n              }\n              if (value.types.indexOf('administrative_area_level_1') > -1) {\n                germanAddress.state.long = value.long_name;\n                germanAddress.state.short = value.short_name;\n              }\n              if (value.types.indexOf('country') > -1) {\n                germanAddress.country.long = value.long_name;\n                germanAddress.country.short = value.short_name;\n              }\n              if (value.types.indexOf('administrative_area_level_3') > -1) {\n                germanAddress.locality.short = value.short_name;\n              }\n            });\n\n            this.onGermanAddressMapped.emit(germanAddress);\n\n            this.value = place.formatted_address;\n            this.address = place.formatted_address;\n            this.onAutocompleteSelected.emit(place);\n            this.onLocationSelected.emit(\n              {\n                latitude: place.geometry.location.lat(),\n                longitude: place.geometry.location.lng()\n              });\n          });\n        });\n      })\n      .catch((err) => console.log(err));\n  }\n\n  registerOnChange(fn: any): void {\n    this.propagateChange = fn;\n  }\n\n  registerOnTouched(fn: any): void {\n  }\n\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  writeValue(obj: any): void {\n    if (obj) {\n      console.log('obj --> ');\n      this.value = obj;\n      // this.cf.markForCheck();\n    }\n    console.log('write value', this.value);\n  }\n\n}\n","import {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {FlexLayoutModule} from '@angular/flex-layout';\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport {MatGoogleMapsAutocompleteDirective} from './directives/mat-google-maps-autocomplete.directive';\nimport {MatValidateAddressDirective} from './directives/address-validator/mat-address-validator.directive';\nimport {MatGoogleMapsAutocompleteComponent} from './component/mat-google-maps-autocomplete.component';\n// tslint:disable-next-line:max-line-length\nimport {MatSearchGoogleMapsAutocompleteComponent} from './component/mat-search-google-maps-autocomplete/mat-search-google-maps-autocomplete.component';\n\n\n@NgModule({\n  imports:\n    [\n      CommonModule,\n      FormsModule,\n      ReactiveFormsModule,\n      FlexLayoutModule,\n      MatInputModule,\n      MatIconModule\n    ],\n  exports: [\n    MatGoogleMapsAutocompleteComponent,\n    MatGoogleMapsAutocompleteDirective,\n    MatValidateAddressDirective,\n    MatSearchGoogleMapsAutocompleteComponent\n  ],\n  declarations: [\n    MatGoogleMapsAutocompleteComponent,\n    MatGoogleMapsAutocompleteDirective,\n    MatValidateAddressDirective,\n    MatSearchGoogleMapsAutocompleteComponent\n  ]\n})\nexport class MatGoogleMapsAutocompleteModule {\n}\n","/*\n * Public API Surface of google-maps-autocomplete\n */\n\nexport * from './lib/interfaces';\nexport * from './lib/component';\nexport * from './lib/directives/mat-google-maps-autocomplete.directive';\nexport * from './lib/directives/address-validator/mat-address-validator.directive';\nexport * from './lib/mat-google-maps-autocomplete.module';\n\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n\nexport {InputAnimations as ɵc} from './lib/animations';\nexport {MatGoogleMapsAutocompleteComponent as ɵa} from './lib/component/mat-google-maps-autocomplete.component';\nexport {MatSearchGoogleMapsAutocompleteComponent as ɵb} from './lib/component/mat-search-google-maps-autocomplete/mat-search-google-maps-autocomplete.component';"],"names":["Directive","NG_VALIDATORS","forwardRef","Appearance","EventEmitter","FormControl","Validators","Component","NG_VALUE_ACCESSOR","MapsAPILoader","NgZone","ViewChild","Input","Output","animation","style","animate","trigger","transition","useAnimation","state","query","stagger","animateChild","Subject","distinctUntilChanged","debounceTime","takeUntil","FormBuilder","isPlatformBrowser","Inject","PLATFORM_ID","ElementRef","ChangeDetectorRef","HostListener","NgModule","CommonModule","FormsModule","ReactiveFormsModule","FlexLayoutModule","MatInputModule","MatIconModule"],"mappings":"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"}